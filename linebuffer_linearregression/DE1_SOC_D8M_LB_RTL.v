
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC_D8M_LB_RTL(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,
	
	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		    [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
	
	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_1, GPIO_1 connect to D8M-GPIO //////////
	inout 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		     [9:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n
);
`include "theta.h"
//=======================================================
//  REG/WIRE declarations
//=======================================================


wire        READ_Request ;
wire 	[7:0] BLUE;
wire 	[7:0] GREEN;
wire 	[7:0] RED;
wire        MIPI_PIXEL_CLK2 ;
wire        RESET_N  ; 
wire	[11:0]CCD_R;
wire	[11:0]CCD_G;
wire	[11:0]CCD_B;
wire [11:0] H_Cont ; 
wire [11:0] V_Cont ; 
wire        I2C_RELEASE ;  
wire        CAMERA_I2C_SCL_MIPI ; 
wire        CAMERA_I2C_SCL_AF;
wire        CAMERA_MIPI_RELAESE ;
wire        MIPI_BRIDGE_RELEASE ;  
wire        AUTO_FOC ;
wire        D8M_CK_HZ  ;
wire        D8M_CK_HZ2;
wire        D8M_CK_HZ3;

//---------x,y---------

wire		[7:0]	xdiv8;	
wire		[7:0]	ydiv8;
wire		[12:0]	pixel_contdiv8;
wire		[10:0]	x;	
wire		[10:0]	y;		

//=======================================================
// Structural coding
//=======================================================

//------HEX OFF --
assign  HEX2 = 7'h7F;
assign  HEX3 = 7'h7F;
assign  HEX4 = 7'h7F;
assign  HEX5 = 7'h7F;

//------ MIPI BRIGE & CAMERA RESET  --
assign CAMERA_PWDN_n  = 1; 
assign MIPI_CS_n      = 0 ; 
assign MIPI_RESET_n   = RESET_N ;


//------ CAMERA MODULE I2C SWITCH  --
assign I2C_RELEASE    =  CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL = ( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   
//------------QSYS-----------
//reg[31:0] test;
//reg[31:0] testcounter;
//initial begin test<=0;
//end
//always @ (posedge stoh)begin
//	if(stoh==1) begin if(test==1000)begin test<=0;htos<=1;end else begin test<=test+1;htos<=1;end end
//	else htos<=0;
//end

reg htos;
wire stoh;
//wire [31:0] indexdata;
wire [31:0] countdata;

reg[6:0] readcounter;
initial begin readcounter<=1;
end
always @ (posedge stoh)begin
	if(stoh==1) begin if(readcounter==80)begin readcounter<=1;htos<=1;end else begin readcounter<=readcounter+1;htos<=1;end end
	else htos<=0;
end

wire [7:0] array80out;

ram array80(
	.clock(VGA_CLK),
	.data(countdata[7:0]),
	.rdaddress(readcounter),
	.wraddress(xdiv8),
	.wren(ydiv8==59&&(x%8==0)),
	.q(array80out));


reg 	[6:0] xarray[0:160];
always @ (posedge VGA_CLK) begin
if (ydiv8==59)begin
	xarray[xdiv8]<=countdata[6:0];
	xarray[xdiv8+80]<=countdata[6:0]**2;
end
end

wire [31:0] multresults [0:160];
			 assign multresults[1]=xarray[1]*THETA1; 
			 assign multresults[2]=xarray[2]*THETA2; 
			 assign multresults[3]=xarray[3]*THETA3; 
			 assign multresults[4]=xarray[4]*THETA4; 
			 assign multresults[5]=xarray[5]*THETA5; 
			 assign multresults[6]=xarray[6]*THETA6; 
			 assign multresults[7]=xarray[7]*THETA7; 
			 assign multresults[8]=xarray[8]*THETA8; 
			 assign multresults[9]=xarray[9]*THETA9; 
			 assign multresults[10]=xarray[10]*THETA10; 
			 assign multresults[11]=xarray[11]*THETA11; 
			 assign multresults[12]=xarray[12]*THETA12; 
			 assign multresults[13]=xarray[13]*THETA13; 
			 assign multresults[14]=xarray[14]*THETA14; 
			 assign multresults[15]=xarray[15]*THETA15; 
			 assign multresults[16]=xarray[16]*THETA16; 
			 assign multresults[17]=xarray[17]*THETA17; 
			 assign multresults[18]=xarray[18]*THETA18; 
			 assign multresults[19]=xarray[19]*THETA19; 
			 assign multresults[20]=xarray[20]*THETA20; 
			 assign multresults[21]=xarray[21]*THETA21; 
			 assign multresults[22]=xarray[22]*THETA22; 
			 assign multresults[23]=xarray[23]*THETA23; 
			 assign multresults[24]=xarray[24]*THETA24; 
			 assign multresults[25]=xarray[25]*THETA25; 
			 assign multresults[26]=xarray[26]*THETA26; 
			 assign multresults[27]=xarray[27]*THETA27; 
			 assign multresults[28]=xarray[28]*THETA28; 
			 assign multresults[29]=xarray[29]*THETA29; 
			 assign multresults[30]=xarray[30]*THETA30; 
			 assign multresults[31]=xarray[31]*THETA31; 
			 assign multresults[32]=xarray[32]*THETA32; 
			 assign multresults[33]=xarray[33]*THETA33; 
			 assign multresults[34]=xarray[34]*THETA34; 
			 assign multresults[35]=xarray[35]*THETA35; 
			 assign multresults[36]=xarray[36]*THETA36; 
			 assign multresults[37]=xarray[37]*THETA37; 
			 assign multresults[38]=xarray[38]*THETA38; 
			 assign multresults[39]=xarray[39]*THETA39; 
			 assign multresults[40]=xarray[40]*THETA40; 
			 assign multresults[41]=xarray[41]*THETA41; 
			 assign multresults[42]=xarray[42]*THETA42; 
			 assign multresults[43]=xarray[43]*THETA43; 
			 assign multresults[44]=xarray[44]*THETA44; 
			 assign multresults[45]=xarray[45]*THETA45; 
			 assign multresults[46]=xarray[46]*THETA46; 
			 assign multresults[47]=xarray[47]*THETA47; 
			 assign multresults[48]=xarray[48]*THETA48; 
			 assign multresults[49]=xarray[49]*THETA49; 
			 assign multresults[50]=xarray[50]*THETA50; 
			 assign multresults[51]=xarray[51]*THETA51; 
			 assign multresults[52]=xarray[52]*THETA52; 
			 assign multresults[53]=xarray[53]*THETA53; 
			 assign multresults[54]=xarray[54]*THETA54; 
			 assign multresults[55]=xarray[55]*THETA55; 
			 assign multresults[56]=xarray[56]*THETA56; 
			 assign multresults[57]=xarray[57]*THETA57; 
			 assign multresults[58]=xarray[58]*THETA58; 
			 assign multresults[59]=xarray[59]*THETA59; 
			 assign multresults[60]=xarray[60]*THETA60; 
			 assign multresults[61]=xarray[61]*THETA61; 
			 assign multresults[62]=xarray[62]*THETA62; 
			 assign multresults[63]=xarray[63]*THETA63; 
			 assign multresults[64]=xarray[64]*THETA64; 
			 assign multresults[65]=xarray[65]*THETA65; 
			 assign multresults[66]=xarray[66]*THETA66; 
			 assign multresults[67]=xarray[67]*THETA67; 
			 assign multresults[68]=xarray[68]*THETA68; 
			 assign multresults[69]=xarray[69]*THETA69; 
			 assign multresults[70]=xarray[70]*THETA70; 
			 assign multresults[71]=xarray[71]*THETA71; 
			 assign multresults[72]=xarray[72]*THETA72; 
			 assign multresults[73]=xarray[73]*THETA73; 
			 assign multresults[74]=xarray[74]*THETA74; 
			 assign multresults[75]=xarray[75]*THETA75; 
			 assign multresults[76]=xarray[76]*THETA76; 
			 assign multresults[77]=xarray[77]*THETA77; 
			 assign multresults[78]=xarray[78]*THETA78; 
			 assign multresults[79]=xarray[79]*THETA79; 
			 assign multresults[80]=xarray[80]*THETA80; 
			 assign multresults[81]=xarray[81]*THETA81; 
			 assign multresults[82]=xarray[82]*THETA82; 
			 assign multresults[83]=xarray[83]*THETA83; 
			 assign multresults[84]=xarray[84]*THETA84; 
			 assign multresults[85]=xarray[85]*THETA85; 
			 assign multresults[86]=xarray[86]*THETA86; 
			 assign multresults[87]=xarray[87]*THETA87; 
			 assign multresults[88]=xarray[88]*THETA88; 
			 assign multresults[89]=xarray[89]*THETA89; 
			 assign multresults[90]=xarray[90]*THETA90; 
			 assign multresults[91]=xarray[91]*THETA91; 
			 assign multresults[92]=xarray[92]*THETA92; 
			 assign multresults[93]=xarray[93]*THETA93; 
			 assign multresults[94]=xarray[94]*THETA94; 
			 assign multresults[95]=xarray[95]*THETA95; 
			 assign multresults[96]=xarray[96]*THETA96; 
			 assign multresults[97]=xarray[97]*THETA97; 
			 assign multresults[98]=xarray[98]*THETA98; 
			 assign multresults[99]=xarray[99]*THETA99; 
			 assign multresults[100]=xarray[100]*THETA100; 
			 assign multresults[101]=xarray[101]*THETA101; 
			 assign multresults[102]=xarray[102]*THETA102; 
			 assign multresults[103]=xarray[103]*THETA103; 
			 assign multresults[104]=xarray[104]*THETA104; 
			 assign multresults[105]=xarray[105]*THETA105; 
			 assign multresults[106]=xarray[106]*THETA106; 
			 assign multresults[107]=xarray[107]*THETA107; 
			 assign multresults[108]=xarray[108]*THETA108; 
			 assign multresults[109]=xarray[109]*THETA109; 
			 assign multresults[110]=xarray[110]*THETA110; 
			 assign multresults[111]=xarray[111]*THETA111; 
			 assign multresults[112]=xarray[112]*THETA112; 
			 assign multresults[113]=xarray[113]*THETA113; 
			 assign multresults[114]=xarray[114]*THETA114; 
			 assign multresults[115]=xarray[115]*THETA115; 
			 assign multresults[116]=xarray[116]*THETA116; 
			 assign multresults[117]=xarray[117]*THETA117; 
			 assign multresults[118]=xarray[118]*THETA118; 
			 assign multresults[119]=xarray[119]*THETA119; 
			 assign multresults[120]=xarray[120]*THETA120; 
			 assign multresults[121]=xarray[121]*THETA121; 
			 assign multresults[122]=xarray[122]*THETA122; 
			 assign multresults[123]=xarray[123]*THETA123; 
			 assign multresults[124]=xarray[124]*THETA124; 
			 assign multresults[125]=xarray[125]*THETA125; 
			 assign multresults[126]=xarray[126]*THETA126; 
			 assign multresults[127]=xarray[127]*THETA127; 
			 assign multresults[128]=xarray[128]*THETA128; 
			 assign multresults[129]=xarray[129]*THETA129; 
			 assign multresults[130]=xarray[130]*THETA130; 
			 assign multresults[131]=xarray[131]*THETA131; 
			 assign multresults[132]=xarray[132]*THETA132; 
			 assign multresults[133]=xarray[133]*THETA133; 
			 assign multresults[134]=xarray[134]*THETA134; 
			 assign multresults[135]=xarray[135]*THETA135; 
			 assign multresults[136]=xarray[136]*THETA136; 
			 assign multresults[137]=xarray[137]*THETA137; 
			 assign multresults[138]=xarray[138]*THETA138; 
			 assign multresults[139]=xarray[139]*THETA139; 
			 assign multresults[140]=xarray[140]*THETA140; 
			 assign multresults[141]=xarray[141]*THETA141; 
			 assign multresults[142]=xarray[142]*THETA142; 
			 assign multresults[143]=xarray[143]*THETA143; 
			 assign multresults[144]=xarray[144]*THETA144; 
			 assign multresults[145]=xarray[145]*THETA145; 
			 assign multresults[146]=xarray[146]*THETA146; 
			 assign multresults[147]=xarray[147]*THETA147; 
			 assign multresults[148]=xarray[148]*THETA148; 
			 assign multresults[149]=xarray[149]*THETA149; 
			 assign multresults[150]=xarray[150]*THETA150; 
			 assign multresults[151]=xarray[151]*THETA151; 
			 assign multresults[152]=xarray[152]*THETA152; 
			 assign multresults[153]=xarray[153]*THETA153; 
			 assign multresults[154]=xarray[154]*THETA154; 
			 assign multresults[155]=xarray[155]*THETA155; 
			 assign multresults[156]=xarray[156]*THETA156; 
			 assign multresults[157]=xarray[157]*THETA157; 
			 assign multresults[158]=xarray[158]*THETA158; 
			 assign multresults[159]=xarray[159]*THETA159; 
			 assign multresults[160]=xarray[160]*THETA160; 
wire [31:0] angleout;
assign angleout= multresults[1]+multresults[2]+multresults[3]+multresults[4]+multresults[5]+multresults[6]+multresults[7]+multresults[8]+multresults[9]+multresults[10]+multresults[11]+multresults[12]+multresults[13]+multresults[14]+multresults[15]+multresults[16]+multresults[17]+multresults[18]+multresults[19]+multresults[20]+multresults[21]+multresults[22]+multresults[23]+multresults[24]+multresults[25]+multresults[26]+multresults[27]+multresults[28]+multresults[29]+multresults[30]+multresults[31]+multresults[32]+multresults[33]+multresults[34]+multresults[35]+multresults[36]+multresults[37]+multresults[38]+multresults[39]+multresults[40]+multresults[41]+multresults[42]+multresults[43]+multresults[44]+multresults[45]+multresults[46]+multresults[47]+multresults[48]+multresults[49]+multresults[50]+multresults[51]+multresults[52]+multresults[53]+multresults[54]+multresults[55]+multresults[56]+multresults[57]+multresults[58]+multresults[59]+multresults[60]+multresults[61]+multresults[62]+multresults[63]+multresults[64]+multresults[65]+multresults[66]+multresults[67]+multresults[68]+multresults[69]+multresults[70]+multresults[71]+multresults[72]+multresults[73]+multresults[74]+multresults[75]+multresults[76]+multresults[77]+multresults[78]+multresults[79]+multresults[80]+multresults[81]+multresults[82]+multresults[83]+multresults[84]+multresults[85]+multresults[86]+multresults[87]+multresults[88]+multresults[89]+multresults[90]+multresults[91]+multresults[92]+multresults[93]+multresults[94]+multresults[95]+multresults[96]+multresults[97]+multresults[98]+multresults[99]+multresults[100]+multresults[101]+multresults[102]+multresults[103]+multresults[104]+multresults[105]+multresults[106]+multresults[107]+multresults[108]+multresults[109]+multresults[110]+multresults[111]+multresults[112]+multresults[113]+multresults[114]+multresults[115]+multresults[116]+multresults[117]+multresults[118]+multresults[119]+multresults[120]+multresults[121]+multresults[122]+multresults[123]+multresults[124]+multresults[125]+multresults[126]+multresults[127]+multresults[128]+multresults[129]+multresults[130]+multresults[131]+multresults[132]+multresults[133]+multresults[134]+multresults[135]+multresults[136]+multresults[137]+multresults[138]+multresults[139]+multresults[140]+multresults[141]+multresults[142]+multresults[143]+multresults[144]+multresults[145]+multresults[146]+multresults[147]+multresults[148]+multresults[149]+multresults[150]+multresults[151]+multresults[152]+multresults[153]+multresults[154]+multresults[155]+multresults[156]+multresults[157]+multresults[158]+multresults[159]+multresults[160];

//-----   -VGA Controller  --
   
VGA_Controller_trig	u1	(	
	       .iCLK          ( MIPI_PIXEL_CLK2),
	       .iHS           ( MIPI_PIXEL_HS  ) , 
	       .iVS           ( MIPI_PIXEL_VS  ) ,
	       .iRed          ( CCD_R[11:4]   ),
	       .iGreen        ( CCD_G[11:4]   ) ,
	       .iBlue         ( CCD_B[11:4]   ),	       	   
	       .oVGA_R        ( RED   ),
	       .oVGA_G        ( GREEN ),
	       .oVGA_B        ( BLUE  ),
	       .oVGA_H_SYNC   ( VGA_HS ),
	       .oVGA_V_SYNC   ( VGA_VS ),
	       .oVGA_SYNC     ( VGA_SYNC_N  ),
	       .oVGA_BLANK    ( VGA_BLANK_N ),
	       .oVGA_CLOCK    ( VGA_CLK     ),
	       .oRequest      ( READ_Request),
	       .iRST_N        ( 1 ) , 
	       .H_Cont_       (H_Cont),
	       .V_Cont_       (V_Cont),
			 //.indexdata		(indexdata[31:0]),
			 .countdata		(countdata[31:0]),
			 .xdiv8(xdiv8),	
			 .ydiv8(ydiv8),
			 .pixel_contdiv8(pixel_contdiv8),
			 .x(x),
			 .y(y)
);
	
//------ MIPI BRIGE & CAMERA SETTING  --  
MIPI_BRIDGE_CAMERA_Config    cfin(
          .RESET_N           (  RESET_N), 
          .CLK_50            ( CLOCK2_50), 
          .MIPI_I2C_SCL      ( MIPI_I2C_SCL), 
          .MIPI_I2C_SDA      ( MIPI_I2C_SDA), 
          .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE),  
          .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
          .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA),
          .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE)
 );


//------AOTO FOCUS ENABLE  --
D8M_SET   ccd (
	       .RESET_SYS_N  ( RESET_N),
          .CLOCK_50     ( CLOCK2_50      ),
	       .CCD_DATA     ( { MIPI_PIXEL_D[9:0] ,2'b00 }   ) ,   
	       .CCD_FVAL     ( MIPI_PIXEL_VS  ),   // 60hz
	       .CCD_LVAL	   ( MIPI_PIXEL_HS  ),   // 28Khz
	       .CCD_PIXCLK   ( MIPI_PIXEL_CLK ),   // 50Mhz
          .VGA_CLK      ( VGA_CLK),
          .VGA_HS       ( VGA_HS),
          .VGA_VS       ( VGA_VS),	
	       .READ_Request ( READ_Request) ,
	       .H_Cont       ( H_Cont),
	       .V_Cont       ( V_Cont),
          .sCCD_R       ( CCD_R),
          .sCCD_G       ( CCD_G),
          .sCCD_B       ( CCD_B)
	       
);
//------MIPI / VGA REF CLOCK  --
pll_test pll_ref(
	       .refclk       ( CLOCK4_50),
	       .rst          ( 1'b0),
	       .outclk_0     ( MIPI_REFCLK ),     //20Mhz
	       .outclk_1     ( MIPI_PIXEL_CLK2 )  //25.18Mhz
);


//------AOTO FOCUS ENABLE  --
AUTO_FOCUS_ON  u9( 
          .CLK_50      ( CLOCK2_50 ), 
          .I2C_RELEASE ( I2C_RELEASE ), 
          .AUTO_FOC    ( AUTO_FOC )
               ) ; 
//------AOTO FOCUS ADJ  --
FOCUS_ADJ adl(
          .CLK_50        ( CLOCK2_50) , 
          .RESET_N       ( I2C_RELEASE ), 
          .RESET_SUB_N   ( I2C_RELEASE ), 
          .AUTO_FOC      ( KEY[3] & AUTO_FOC ),
          .SW_Y          ( 0 ),
          .SW_H_FREQ     ( 0 ),   
          .SW_FUC_LINE   ( SW[3] ),   
          .SW_FUC_ALL_CEN( 0 ),
          .VIDEO_HS      ( VGA_HS),
          .VIDEO_VS      ( VGA_VS),
	       .VIDEO_DE      (READ_Request) ,
          .VIDEO_CLK     ( VGA_CLK),
          .iR            ( RED), 
          .iG            ( GREEN), 
          .iB            ( BLUE), 
          .oR            ( VGA_R), 
          .oG            ( VGA_G), 
          .oB            ( VGA_B),    
          .READY         ( READY),
          .SCL           ( CAMERA_I2C_SCL_AF ), 
          .SDA           ( CAMERA_I2C_SDA )
   
);   
   
//-----   -AOTO FOCUS ENABLE  --
RESET_DELAY  dl(
           .RESET_N      ( KEY[0] ) ,
           .CLK          ( CLOCK2_50) , 
           .READY        ( RESET_N)  
);   
   
				
//-- VS FREQUENCY MEASURE : 60HZ --
 
FpsMonitor uFps(
	/*input					  */    .clk50    ( CLOCK2_50 ),
	/*input     			  */    .vs       ( MIPI_PIXEL_VS ),
	/*output reg [7:0]	  */    .fps      ( ),
	/*output reg [6:0]	  */    .hex_fps_h( HEX1 ),
	/*output reg [6:0]	  */    .hex_fps_l( HEX0 )
);


//--FREQUNCY TEST--
CLOCKMEM  ck1 ( .CLK(VGA_CLK   ),     .CLK_FREQ  (25000000  ),.CK_1HZ (D8M_CK_HZ   ));
CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK    ),.CLK_FREQ  (20000000  ),.CK_1HZ (D8M_CK_HZ2  ));
CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK ),.CLK_FREQ  (25000000 ),.CK_1HZ (D8M_CK_HZ3  ));

//--LED STATUS-----
assign LEDR[9:0] = { D8M_CK_HZ ,D8M_CK_HZ2,D8M_CK_HZ3 ,5'h0,CAMERA_MIPI_RELAESE ,MIPI_BRIDGE_RELEASE  } ; 

endmodule


